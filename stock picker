from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task
from crewai_tools import SerperDevTool
from pydantic import BaseModel, Field
from typing import List
from .tools.push_tool import PushNotificationTool
from crewai.memory import LongTermMemory, ShortTermMemory, EntityMemory
from crewai.memory.storage.rag_storage import RAGStorage
from crewai.memory.storage.ltm_sqlite_storage import LTMSQLiteStorage


class TrendingCompany(BaseModel):
  """ A company that is in the news and attracting attention """
  name: str = Field(description="Company name")
  ticker: str = Field(description="Stock ticker symbol")
  reason: str = Field(description="Reason this company is trending in the news")


class TrendingCompanyList(BaseModel):
  """ List of multiple trending companies that are in the news """
  companies: List[TrendingCompany] = Field(description="List of companies trending in the news")


class TrendingCompanyResearch(BaseModel):
  """ Detailed research on a company """
  name: str = Field(description="Company name")
  market_position: str = Field(description="Current market position and competitive analysis")
  future_outlook: str = Field(description="Future outlook and growth prospects")
  investment_potential: str = Field(description="Investment potential and suitability for investment")


class TrendingCompanyResearchList(BaseModel):
  """ A list of detailed research on all the companies """
  research_list: List[TrendingCompanyResearch] = Field(description="Comprehensive research on all trending companies")


@CrewBase
class StockPicker():
  """StockPicker crew"""

  agents_config = 'config/agents.yaml'
  tasks_config = 'config/tasks.yaml'

  @agent
  def trending_company_finder(self) -> Agent:
    return Agent(config=self.agents_config['trending_company_finder'],
                 tools=[SerperDevTool()], memory=True)

  @agent
  def financial_researcher(self) -> Agent:
    return Agent(config=self.agents_config['financial_researcher'],
                 tools=[SerperDevTool()])

  @agent
  def stock_picker(self) -> Agent:
    return Agent(config=self.agents_config['stock_picker'],
                 tools=[PushNotificationTool()], memory=True)

  @task
  def find_trending_companies(self) -> Task:
    return Task(
      config=self.tasks_config['find_trending_companies'],
      output_pydantic=TrendingCompanyList,
    )

  @task
  def research_trending_companies(self) -> Task:
    return Task(
      config=self.tasks_config['research_trending_companies'],
      output_pydantic=TrendingCompanyResearchList,
    )

  @task
  def pick_best_company(self) -> Task:
    return Task(
      config=self.tasks_config['pick_best_company'],
    )

  @crew
  def crew(self) -> Crew:
    """Creates the StockPicker crew"""

    manager = Agent(
      config=self.agents_config['manager'],
      allow_delegation=True
    )

    return Crew(
      agents=self.agents,
      tasks=self.tasks,
      process=Process.hierarchical,
      verbose=True,
      manager_agent=manager,
      memory=True,
      # Long-term memory for persistent storage across sessions
      long_term_memory=LongTermMemory(
        storage=LTMSQLiteStorage(
          db_path="./memory/long_term_memory_storage.db"
        )
      ),
      # Short-term memory for current context using RAG
      short_term_memory=ShortTermMemory(
        storage=RAGStorage(
          embedder_config={
            "provider": "openai",
            "config": {
              "model": 'text-embedding-3-small'
            }
          },
          type="short_term",
          path="./memory/"
        )
      ),  # Entity memory for tracking key information about entities
      entity_memory=EntityMemory(
        storage=RAGStorage(
          embedder_config={
            "provider": "openai",
            "config": {
              "model": 'text-embedding-3-small'
            }
          },
          type="short_term",
          path="./memory/"
        )
      ),
    )


#!/usr/bin/env python
import sys
import warnings
import os
from datetime import datetime

from stock_picker.crew import StockPicker

warnings.filterwarnings("ignore", category=SyntaxWarning, module="pysbd")


def run():
    """
    Run the research crew.
    """
    inputs = {
        'sector': 'Technology',
        "current_date": str(datetime.now())
    }

    # Create and run the crew
    result = StockPicker().crew().kickoff(inputs=inputs)

    # Print the result
    print("\n\n=== FINAL DECISION ===\n\n")
    print(result.raw)


if __name__ == "__main__":
    run()


#agents.yaml
trending_company_finder:
  role: >
    Financial News Analyst that finds trending companies in {sector}
  goal: >
    You read the latest news, then find 2-3 companies that are trending in the news for further research.
    Always pick new companies. Don't pick the same company twice.
  backstory: >
    You are a market expert with a knack for picking out the most interesting companies based on latest news.
    You spot multiple companies that are trending in the news.
  llm: openai/gpt-4o-mini

financial_researcher:
  role: >
    Senior Financial Researcher
  goal: >
    Given details of trending companies in the news, you provide comprehensive analysis of each in a report.
  backstory: >
    You are a financial expert with a proven track record of deeply analyzing hot companies and building comprehensive reports.
  llm: openai/gpt-4o-mini

stock_picker:
  role: >
    Stock Picker from Research
  goal: >
    Given a list of researched companies with investment potential, you select the best one for investment,
    notifying the user and then providing a detailed report. Don't pick the same company twice.
  backstory: >
    You're a meticulous, skilled financial analyst with a proven track record of equity selection.
    You have a talent for synthesizing research and picking the best company for investment.
  llm: openai/gpt-4o-mini

manager:
  role: >
    Manager
  goal: >
    You are a skilled project manager who can delegate tasks in order to achieve your goal, which is to pick the best company for investment.
  backstory: >
    You are an experienced and highly effective project manager who can delegate tasks to the right people.
  llm: openai/gpt-4o


#tasks.yaml
find_trending_companies:
  description: >
    Find the top trending companies in the news in {sector} by searching the latest news. Find new companies that you've not found before.
  expected_output: >
    A list of trending companies in {sector}
  agent: trending_company_finder
  output_file: output/trending_companies.json

research_trending_companies:
  description: >
    Given a list of trending companies, provide detailed analysis of each company in a report by searching online
  expected_output: >
    A report containing detailed analysis of each company
  agent: financial_researcher
  context:
    - find_trending_companies
  output_file: output/research_report.json

pick_best_company:
  description: >
    Analyze the research findings and pick the best company for investment.
    Send a push notification to the user with the decision and 1 sentence rationale.
    Then respond with a detailed report on why you chose this company, and which companies were not selected.
  expected_output: >
    The chosen company and why it was chosen; the companies that were not selected and why they were not selected.
  agent: stock_picker
  context:
    - research_trending_companies
  output_file: output/decision.md


