#include <iostream>
using namespace std;

class Node {
    public:
        int data;
        Node* next;
        
        Node(int val) {
            data = val;
            next = NULL;
        }
};

class List{
    Node* head;
    Node* tail;
    public:

    List() {
        head = NULL;
        tail = NULL;
    }

    void push_front(int val){
        Node *newnode = new Node(val);
        if (head == NULL){
            head = tail = newnode;
            return;
        }
        else{
            newnode->next = head;
            head = newnode;
        }
    }

    void push_back(int val){
        Node *newnode = new Node(val);
        if (head == NULL){
            head = tail = newnode;
            return;
        }
        else{
            tail->next = newnode;
            tail = newnode;
        }
    }

    void pop_front(){
        if (head == NULL){
            return;
        }
        Node* temp = head;
        head = head->next;

        temp->next = NULL;
        delete temp;
    }

    void pop_back(){
        if (head == NULL){
            return;
        }
        Node* temp = head;
        while (temp -> next != tail){
            temp = temp->next;
        }
        temp->next = NULL;
        delete tail;
        tail = temp;
    }

    void insert(int val, int pos){
        if (pos < 0){
            cout << "Invalid position!" << endl;
            return;
        }
        else if (pos == 0){
            push_front(val);
            return;
        }
        else{
            Node* newnode = new Node(val);
            Node* temp = head;
            for (int i = 0; i< pos - 1; i++){
                temp = temp -> next;                
            }
            newnode->next = temp->next;
            temp->next = newnode;
        }
    }

    void print(){
        Node* temp = head;
        while (temp != NULL){
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main(){
    List ll;
    ll.push_front(10);
    ll.push_front(20);
    ll.push_back(30);
    ll.print(); 
}   
